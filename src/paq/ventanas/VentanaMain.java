package paq.ventanas;

import java.awt.Desktop;
import java.io.IOException;
import java.net.URISyntaxException;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.sql.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.event.HyperlinkEvent;
import javax.swing.event.HyperlinkListener;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author SEBASTIAN
 */
public class VentanaMain extends javax.swing.JFrame {
    
    /**
     * Creates new form Ventana2
     */
    private final Connection conexionSQL;
    private String query = null;
    
   public VentanaMain(Connection c) throws SQLException {
        this.conexionSQL = c;
        initComponents();
        setLocationRelativeTo(null);
        tablaDatos.setDefaultEditor(Object.class, null);
        // Cambiar al esquema de ingdata
        Statement cambiarEsquema = c.createStatement(); cambiarEsquema.execute("ALTER SESSION SET CURRENT_SCHEMA=INGDATA"); cambiarEsquema.close();
   }

    public JButton getBotonAbrirReportes() {
        return botonAbrirReportes;
    }

    public void setBotonAbrirReportes(JButton botonAbrirReportes) {
        this.botonAbrirReportes = botonAbrirReportes;
    }

    public JButton getBotonAgendarCita() {
        return botonAgendarCita;
    }

    public void setBotonAgendarCita(JButton botonAgendarCita) {
        this.botonAgendarCita = botonAgendarCita;
    }

    public JButton getBotonAñadirCliente() {
        return botonAñadirCliente;
    }

    public void setBotonAñadirCliente(JButton botonAñadirCliente) {
        this.botonAñadirCliente = botonAñadirCliente;
    }

    public JButton getBotonAñadirTransaccion() {
        return botonAñadirTransaccion;
    }

    public void setBotonAñadirTransaccion(JButton botonAñadirTransaccion) {
        this.botonAñadirTransaccion = botonAñadirTransaccion;
    }
    


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaDatos = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        comboBoxTablas = new javax.swing.JComboBox();
        botonActualizar = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        campoQuerySQL = new javax.swing.JTextArea();
        botonQuery = new javax.swing.JButton();
        botonAbrirReportes = new javax.swing.JButton();
        botonAñadirCliente = new javax.swing.JButton();
        botonAñadirTransaccion = new javax.swing.JButton();
        campoSentenciaSQL = new javax.swing.JLabel();
        botonAgendarCita = new javax.swing.JButton();
        campoPerrito = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Proyecto Integrador | 2023-II");

        tablaDatos.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        tablaDatos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Atributos"
            }
        ));
        jScrollPane1.setViewportView(tablaDatos);

        jLabel1.setFont(new java.awt.Font("Comic Sans MS", 0, 36)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("UL-VET-TECH");
        jLabel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel1MouseClicked(evt);
            }
        });

        comboBoxTablas.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "-", "Cita", "Cliente", "Cliente_Mascota", "Historia", "Instrumento", "Mascota", "Producto", "Proveedor", "Recepcionista", "Trans_Cliente", "Trans_Proveedor", "Veterinario" }));
        comboBoxTablas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxTablasActionPerformed(evt);
            }
        });

        botonActualizar.setText("actualizar tabla");
        botonActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonActualizarActionPerformed(evt);
            }
        });

        campoQuerySQL.setColumns(20);
        campoQuerySQL.setFont(new java.awt.Font("Cascadia Code", 0, 14)); // NOI18N
        campoQuerySQL.setRows(5);
        jScrollPane2.setViewportView(campoQuerySQL);

        botonQuery.setBackground(new java.awt.Color(255, 153, 51));
        botonQuery.setText("Hacer query");
        botonQuery.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonQueryActionPerformed(evt);
            }
        });

        botonAbrirReportes.setText("Ver reportes");
        botonAbrirReportes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonAbrirReportesActionPerformed(evt);
            }
        });

        botonAñadirCliente.setText("Agregar cliente y mascota");
        botonAñadirCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonAñadirClienteActionPerformed(evt);
            }
        });

        botonAñadirTransaccion.setText("Registrar transaccion");
        botonAñadirTransaccion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonAñadirTransaccionActionPerformed(evt);
            }
        });

        campoSentenciaSQL.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        campoSentenciaSQL.setText("Panel de sentencias SQL*");
        campoSentenciaSQL.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        campoSentenciaSQL.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                campoSentenciaSQLMouseClicked(evt);
            }
        });

        botonAgendarCita.setText("Agendar cita");
        botonAgendarCita.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonAgendarCitaActionPerformed(evt);
            }
        });

        campoPerrito.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        campoPerrito.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paq/img/perrito.gif"))); // NOI18N
        campoPerrito.setText(" ");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(72, 72, 72)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(comboBoxTablas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(46, 46, 46)
                                .addComponent(botonActualizar)
                                .addGap(102, 102, 102)
                                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(18, 18, 18)
                                .addComponent(botonAbrirReportes, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1)))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addGap(68, 68, 68)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(campoSentenciaSQL, javax.swing.GroupLayout.PREFERRED_SIZE, 303, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(campoPerrito, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 859, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(botonAñadirCliente, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(botonQuery, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(botonAñadirTransaccion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(botonAgendarCita, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))
                .addGap(61, 61, 61))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(comboBoxTablas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(botonActualizar)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(botonAbrirReportes, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 248, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(campoSentenciaSQL, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(campoPerrito, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(botonAñadirCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(8, 8, 8)
                        .addComponent(botonAñadirTransaccion, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(8, 8, 8)
                        .addComponent(botonAgendarCita, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(botonQuery))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(37, 37, 37))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void botonQueryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonQueryActionPerformed
        try {
            setQuery(campoQuerySQL.getText());
            //System.out.println(getQuery());

            // Definir modelo
            DefaultTableModel modelo = new DefaultTableModel();
            // Poner encabezado
            String[] atributos = null;
            Statement llamada = conexionSQL.createStatement();
            ResultSet setDeResultados = llamada.executeQuery(getQuery()); // Llamada de query
            
            // Verificar si es sentencia que no retorna resultset
            String[] palabras = getQuery().split(" ");
            for (String palabra : palabras) if (palabra.equalsIgnoreCase("insert") || palabra.equalsIgnoreCase("alter") || palabra.equalsIgnoreCase("update") || palabra.equalsIgnoreCase("delete")) return;
            
            ResultSetMetaData metaData = setDeResultados.getMetaData();
            int numColumnas = metaData.getColumnCount();
            atributos = new String[numColumnas];

            for (int i = 1; i <= numColumnas; i++) {
                atributos[i-1] = metaData.getColumnName(i);
            }
            modelo.setColumnIdentifiers(atributos);

            // Llenar tabla con información
            while (setDeResultados.next()) {
                String[] info = new String[atributos.length];
                for (int i = 0; i < atributos.length; i++) {
                    info[i] = setDeResultados.getString(atributos[i]);
                }
                modelo.addRow(info);
            }

            // Cerrar resultSet y sentencia
            setDeResultados.close();
            llamada.close();

            // Colocar modelo creado
            tablaDatos.setModel(modelo);
        } catch (SQLException ex) {
            if (ex.getErrorCode() == 1031) {                
                JOptionPane.showMessageDialog(null, "", "Permisos insuficientes", 0, new ImageIcon(getClass().getResource("/paq/img/textopermisos.gif")));
            }
            else JOptionPane.showMessageDialog(null, "Error en query:\n" + ex.getMessage(), "Error en query", 2);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Algo salio mal:\n" + ex.getMessage() + "\n" + ex.getClass(), "Error en query", 2);
        }
    }//GEN-LAST:event_botonQueryActionPerformed

    private void botonActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonActualizarActionPerformed
        try {
            // Lógica para el botón "Actualizar"
            DefaultTableModel modelo = (DefaultTableModel) tablaDatos.getModel();
            modelo.setColumnCount(0); // Elimina todas las columnas existentes
            modelo.setRowCount(0);    // Elimina todas las filas existentes
            actualizarTabla();
        } catch (SQLException ex) {
            Logger.getLogger(VentanaMain.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_botonActualizarActionPerformed

    private void comboBoxTablasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxTablasActionPerformed
        
        if(comboBoxTablas.getSelectedItem().toString().equalsIgnoreCase("-")) return;
        try {
            // Lógica para el botón "Actualizar"
            DefaultTableModel modelo = (DefaultTableModel) tablaDatos.getModel();
            modelo.setColumnCount(0); // Elimina todas las columnas existentes
            modelo.setRowCount(0);    // Elimina todas las filas existentes
            actualizarTabla();
        } catch (SQLException ex) {
            Logger.getLogger(VentanaMain.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_comboBoxTablasActionPerformed

    private void botonAñadirClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonAñadirClienteActionPerformed
        new VentanaCliente(conexionSQL).setVisible(true);
    }//GEN-LAST:event_botonAñadirClienteActionPerformed

    private void botonAñadirTransaccionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonAñadirTransaccionActionPerformed
        new VentanaTransaccion(conexionSQL).setVisible(true);
    }//GEN-LAST:event_botonAñadirTransaccionActionPerformed

    private void botonAbrirReportesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonAbrirReportesActionPerformed
        try {
            new VentanaReporte(conexionSQL).setVisible(true);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Algo salio mal:\n" + ex.getMessage());
        }
    }//GEN-LAST:event_botonAbrirReportesActionPerformed

    private void jLabel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel1MouseClicked
        
    }//GEN-LAST:event_jLabel1MouseClicked

    private void campoSentenciaSQLMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_campoSentenciaSQLMouseClicked
        String textoHTML = "<html><body style=\"font-family:Times New Roman; font-size:16pt;\">" +
                "Ejemplos de Sentencias SQL en Oracle XE:<br/>" +
                "<a href=\"https://pentestmonkey.net/cheat-sheet/sql-injection/oracle-sql-injection-cheat-sheet\">Página con cheatsheet de PentestMonkey</a>" +
                "</body></html>";

        JEditorPane editorPane = new JEditorPane("text/html", textoHTML);
        editorPane.setEditable(false);
        editorPane.setBackground(editorPane.getBackground());

        HyperlinkListener listener = (HyperlinkEvent e) -> {
            if (e.getEventType().equals(HyperlinkEvent.EventType.ACTIVATED)) {
                try {
                    Desktop.getDesktop().browse(e.getURL().toURI());
                } catch (URISyntaxException ex) {
                    Logger.getLogger(VentanaMain.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(VentanaMain.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        };
        editorPane.addHyperlinkListener(listener);

        JOptionPane.showMessageDialog(null, editorPane);
    }//GEN-LAST:event_campoSentenciaSQLMouseClicked

    private void botonAgendarCitaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonAgendarCitaActionPerformed
        try {
            new VentanaCita(conexionSQL).setVisible(true);
        } catch (SQLException ex) {
            Logger.getLogger(VentanaMain.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_botonAgendarCitaActionPerformed

    
    private void actualizarTabla() throws SQLException {
        // Lógica para actualizar la tabla según la opción seleccionada
        String tablaSeleccionada = (String) comboBoxTablas.getSelectedItem();
        DefaultTableModel modelo = new DefaultTableModel();

        String[] atributos = null;
        if (null != tablaSeleccionada) 
            
            switch (tablaSeleccionada) {
            case "Cita":
                tablaSeleccionada = "Cita";
                break;
            case "Cliente":
                tablaSeleccionada = "Cliente";
                break;
            case "Cliente_Mascota":
                tablaSeleccionada = "Cliente_Mascota";
                break;
            case "Historia":
                tablaSeleccionada = "HistoriaClinica";
                break;
            case "Instrumento":
                tablaSeleccionada = "InstrumentoMedico";
                break;
            case "Mascota":
                tablaSeleccionada = "Mascota";
                break;
            case "Producto":
                tablaSeleccionada = "Producto";
                break;
            case "Proveedor":
                tablaSeleccionada = "Proveedor";
                break;
            case "Recepcionista":
                tablaSeleccionada = "Recepcionista";
                break;
            case "Trans_Cliente":
                tablaSeleccionada = "Transaccion_Cliente";
                break;
            case "Trans_Proveedor":
                tablaSeleccionada = "Transaccion_Proveedor";
                break;
            case "Veterinario":
                tablaSeleccionada = "Veterinario";
                break;
            default:
                tablaSeleccionada = null;
                break;
        } else {
            JOptionPane.showMessageDialog(null, "ERROR EN TABLA: " + tablaSeleccionada);
            return;
        }
        
        // Poner encabezado
        Statement statement = conexionSQL.createStatement();
        ResultSet resultSet = statement.executeQuery("SELECT * FROM " + tablaSeleccionada);
//        ResultSet resultSet = statement.executeQuery("select * from Cita inner join Cliente on cita.id_cliente = cliente.dni_cliente where cliente.nombres like '%a'");
        
        ResultSetMetaData metaData = resultSet.getMetaData();
        int numColumnas = metaData.getColumnCount();
        atributos = new String[numColumnas];
        
        for (int i = 1; i <= numColumnas; i++) {
            atributos[i-1] = metaData.getColumnName(i);
        }
        modelo.setColumnIdentifiers(atributos);
        
        // Llenar tabla con información
        while (resultSet.next()) {
            String[] info = new String[atributos.length];
            for (int i = 0; i < atributos.length; i++) {
                info[i] = resultSet.getString(atributos[i]);
            }
            modelo.addRow(info);
        }   

        // Cerrar resultSet y sentencia
        resultSet.close();
        statement.close();
        
        // Colocar modelo creado
        tablaDatos.setModel(modelo);
    }

    public String getQuery() {
        return query;
    }

    public void setQuery(String query) {
        this.query = query;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botonAbrirReportes;
    private javax.swing.JButton botonActualizar;
    private javax.swing.JButton botonAgendarCita;
    private javax.swing.JButton botonAñadirCliente;
    private javax.swing.JButton botonAñadirTransaccion;
    private javax.swing.JButton botonQuery;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JLabel campoPerrito;
    private javax.swing.JTextArea campoQuerySQL;
    private javax.swing.JLabel campoSentenciaSQL;
    private javax.swing.JComboBox comboBoxTablas;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tablaDatos;
    // End of variables declaration//GEN-END:variables
}
